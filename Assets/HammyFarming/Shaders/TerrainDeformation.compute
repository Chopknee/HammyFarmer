// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain


// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
Texture2D<float4> StampMap;

float2 stampSize;
float4x4 transformationMatrix;

float3 weights;

float deltaTime;
bool additiveOnly;

bool inBounds ( float2 pos, float2 boundsSize ) {
    bool isBd = pos.x >= 0 && pos.x <= boundsSize.x;
    isBd = isBd && pos.y >= 0 && pos.y <= boundsSize.y;
    return isBd;
}

[numthreads(8, 8, 1)]
void CSMain ( uint3 id : SV_DispatchThreadID ) {

	float2 texCoords = id.xy;

	//Transform the stamp map on the main texture (KEEP W 1.0!!!!)
    float4 pos = float4(texCoords.x, texCoords.y, 0.0, -1.0);
    pos = mul(transformationMatrix, pos);
	//pos = float4(transformationMatrix[0][3], transformationMatrix[1][3], 0.0, 1.0);

	//float3 weights = float3(deformWeight, tillWeight, waterWeight);
	//Get the color weights into a vector
	float3 col = StampMap[pos.xy].rgb;
	//Shift the colors down

	//col = ((col * 2.0) - 1.0) * 0.5;
	if (!additiveOnly)
		col = (col - 0.5) * 2.0;

	col.r *= weights.r;col.g *= weights.g;col.b *= weights.b;
	col = col * deltaTime;
	//Get the stamp bounds clipping into an alpha
	float alpha = (inBounds(pos.xy, stampSize)) ? StampMap[pos.xy].a : 0.0;
	//Pre-make the final vector for later use
	float4 final = float4(0.0, 0.0, 0.0, 0.0);
	//Calculate the final result by multiplying each component of color by alpha.
	final = float4((Result[texCoords.xy].rgb + ((col) * alpha)).rgb, 1.0);

	//Apply the final result to the output
    Result[texCoords.xy] = final;
}