// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Input;
RWTexture2D<float4> Result;

float diffusionFactor;
float timeStep;

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	//Grabbing the velocity and current position
	float2 v = Input[id.xy].xy;
	float2 p = id.xy;
	//Calculate the new position
	p = p + v * timeStep;

	//The four points close to the specified point.
	float2 A = float2(floor(p.x), floor(p.y));
	float2 B = float2(ceil(p.x), floor(p.y));
	float2 C = float2(floor(p.x), ceil(p.y));
	float2 D = float2(ceil(p.x), ceil(p.y));
	//Need to distribute the velocity across the 4 points
	float Adist = distance(A, id.xy);
	Result[A].x = lerp(Input[A].x, v.x, Adist);
	Result[A].y = lerp(Input[A].y, v.y, Adist);


	Result[id.xy] = float4(1, 0, 0, 0);
}
