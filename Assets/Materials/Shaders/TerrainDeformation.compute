// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain


// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
Texture2D<float4> StampMap;

float2 stampSize;
float4x4 transformationMatrix;
float3 velocity;
float weight;

bool inBounds ( float2 pos, float2 boundsSize ) {
    bool isBd = pos.x >= 0 && pos.x <= boundsSize.x;
    isBd = isBd && pos.y >= 0 && pos.y <= boundsSize.y;
    return isBd;
}

float magnitude ( float2 vec ) {
    return sqrt(vec.x * vec.x + vec.y * vec.y);
}

[numthreads(8, 8, 1)]
void CSMain ( uint3 id : SV_DispatchThreadID ) {
    float4 pos = float4(id.x, id.y, id.z, 1);
    pos = mul(transformationMatrix, pos);
    float4 AdditionalColor = (inBounds(pos.xy, stampSize)) ? StampMap[pos.xy] : float4(0, 0, 0, 0);
    float4 nc = AdditionalColor * 2.0 - 1.0;
    float speed = magnitude(velocity.xz); //length(velocity.xz);
    Result[id.xy] = Result[id.xy] + (speed * weight * (nc * AdditionalColor.a));
}